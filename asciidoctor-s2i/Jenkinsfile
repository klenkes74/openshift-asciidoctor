def templateName = 'docpod'
def templateNameSpace = 'dev-images'
def applicationName = 'docutest'
def testApplication = applicationName + '-docpod'

def targetBuild = 'nginx-asciidoctor-base-' + env.ASCIIDOCTOR_VERSION
def targetImage = 'asciidoctor-s2i-' + env.ASCIIDOCTOR_VERSION

pipeline {
  agent none

  options {
    timeout(time: 20, unit: 'MINUTES') 
  }
  stages {
    stage('preamble') {
        steps {
            script {
                openshift.withCluster() {
                    openshift.withProject() {
                        echo "Using project: ${openshift.project()}"
                        echo "Generating: ${targetBuild}"
                        echo "Testing with: ${testApplication}"
                    }
                }
            }
        }
    }
    stage('build') {
      steps {
        script {
            openshift.withCluster() {
                openshift.withProject() {
                  def builds = openshift.startBuild(targetBuild);

                  timeout(15) { 
                    builds.untilEach(1) {
                      return (it.object().status.phase == "Running")

                    }
                    
                    builds.logs("-f")
                  }
                }
            }
        }
      }
    }
    stage('pretest-cleanup') {
      steps {
        script {
          try {
            openshift.withCluster() {
                openshift.withProject() {
                  openshift.selector("all", [ delete: testApplication]).delete() 

                  if (openshift.selector("secrets", testApplication).exists()) { 
                    openshift.selector("secrets", testApplication).delete()
                  }
                }
            }
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
          }          
        }
      }
    }
    stage('deploy') {
      steps {
        script {
            openshift.withCluster() {
                def template = openshift.withProject(templateNameSpace) {
	          openshift.selector('template', templateName).object()
                }

                openshift.withProject() {
                  openshift.create( openshift.process(template, "-p", "APPLICATION_NAME=" + applicationName))

                  sleep 5

                  timeout(5) { 
                    def builds = openshift.selector("bc", testApplication).related('build').latest()

                    builds.untilEach(1) {
                      return (it.object().status.phase == "Running")
                    }

                    builds.logs("-f")
                  }

                  def rm = openshift.selector("dc", testApplication).rollout().latest()
                  timeout(5) { 
                    openshift.selector("dc", testApplication).related('pods').untilEach(1) {
                      return (it.object().status.phase == "Running")
                    }
                  }
                }
            }
        }
      }
    }
    stage('posttest-cleanup') {
      steps {
        script {
            openshift.withCluster() {
                openshift.withProject() {
                  openshift.selector("all", [ delete: testApplication]).delete() 

                  if (openshift.selector("secrets", testApplication).exists()) { 
                    openshift.selector("secrets", testApplication).delete()
                  }
                }
            }
        }
      }
    }
    stage('tag') {
      steps {
        script {
            openshift.withCluster() {
                openshift.withProject() {
                  openshift.tag(targetImage + ":test", targetImage + ":latest") 
                }
            }
        }
      }
    }
  }
}
